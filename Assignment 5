import pygame,sys,random

pygame.init()
pygame.mixer.init()

screen = pygame.display.set_mode((800,800))

deathnoise = pygame.mixer.Sound("Assignment 5/deathnoise.mp3")
spawnbeep = pygame.mixer.Sound("Assignment 5/spawnbeep.mp3")
spawnbeep.set_volume(.7)

pygame.mixer.music.load("Assignment 5/bgm.mp3")
pygame.mixer.music.set_volume(.7)

def scorecalc(self):
    minutes = self // 60000
    seconds = (self % 60000)//1000
    milliseconds = self % 1000
    return str(minutes) + " : " + str(seconds) + " : " + str(milliseconds)

def collision():
    collide = False
    for meteor in meteorlist:
        if player.colliderect(meteor):
            collide = True
    return collide

def speed(edge):
    match edge:
        case 1: #top border
            speedx = random.randint(-3,3)
            speedy = random.randint(2,5)
        case 2: #left border
            speedx = random.randint(2,5)
            speedy = random.randint(-3,3)
        case 3: #bottom border
            speedx = random.randint(-3,3)
            speedy = random.randint(-5,-2)
        case 4: #right border
            speedx = random.randint(-5,-2)
            speedy = random.randint(-3,3)
    return speedx,speedy

def randcolor():
    r = random.randint(10,255)
    g = random.randint(10,255)
    b = random.randint(10,255)
    return r,g,b

while True:
    screen.fill((0,0,0))

    clock = pygame.time.Clock()

    player = pygame.Rect(380,380,40,40)
    shipsurf = pygame.Surface((player.w,player.h))
    shipsurf.fill((255,255,255))

    meteor1 = pygame.Rect(0,0,0,0)
    meteor2 = pygame.Rect(0,0,0,0)
    meteor3 = pygame.Rect(0,0,0,0)
    meteor4 = pygame.Rect(0,0,0,0)
    meteor5 = pygame.Rect(0,0,0,0)
    meteor6 = pygame.Rect(0,0,0,0)
    meteor7 = pygame.Rect(0,0,0,0)
    meteor8 = pygame.Rect(0,0,0,0)
    meteor9 = pygame.Rect(0,0,0,0)
    meteor10 = pygame.Rect(0,0,0,0)

    up = False
    left = False
    down = False
    right = False

    start = True

    start_time = pygame.time.get_ticks()

    timelist = [5,10,15,20,25,30,35,40,45]

    pygame.mixer.music.rewind()
    pygame.mixer.music.play()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
        
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_w:
                    up = True
                if event.key == pygame.K_a:
                    left = True
                if event.key == pygame.K_s:
                    down = True
                if event.key == pygame.K_d:
                    right = True

            if event.type == pygame.KEYUP:
                if event.key == pygame.K_w:
                    up = False
                if event.key == pygame.K_a:
                    left = False
                if event.key == pygame.K_s:
                    down = False
                if event.key == pygame.K_d:
                    right = False

        if up:
            if player.top > 0:
                player = player.move(0,-3)
        if left:
            if player.left > 0:
                player = player.move(-3,0)
        if down:
            if player.bottom < 800:
                player = player.move(0,3)
        if right:
            if player.right < 800:
                player = player.move(3,0)

        counting_time = pygame.time.get_ticks() - start_time
        timing = counting_time//1000
        minutes = counting_time // 60000
        seconds = (counting_time % 60000)//1000
        milliseconds = counting_time % 1000
        counting_string = str(minutes) + " : " + str(seconds) + " : " + str(milliseconds)

        #play a sound each time a new meteor comes into play
        
        if start:
            spawnbeep.play()
        if timing in timelist:
            spawnbeep.play()
            timelist.remove(timing)
            

        # New meteor spawns every 5 seconds until 10 meteors are on the screen
        if start or (meteor1.bottom < 0 or meteor1.top > 800 or meteor1.left > 800 or meteor1.right < 0):
            edge = random.randint(1,4)
            width1 = random.randint(20,60)
            height1 = random.randint(20,60)
            match edge:
                case 1: #top border
                    x1 = random.randint(0,740)
                    y1 = 0
                case 2: #left border
                    x1 = 0
                    y1 = random.randint(0,740)    
                case 3: #bottom border
                    x1 = random.randint(0,740)
                    y1 = 740
                case 4: #right border
                    x1 = 740
                    y1 = random.randint(0,740)
            meteor1 = pygame.Rect(x1,y1,width1,height1)
            metsurf1 = pygame.Surface((width1,height1))
            metsurf1.fill((randcolor()))
            path1 = speed(edge)
            start = False
        meteor1 = meteor1.move(path1)

        if  timing == 5 or (meteor2.bottom < 0 or meteor2.top > 800 or meteor2.left > 800 or meteor2.right < 0):
            edge = random.randint(1,4)
            width2 = random.randint(20,60)
            height2 = random.randint(20,60)
            match edge:
                case 1: #top border
                    x2 = random.randint(0,740)
                    y2 = 0
                case 2: #left border
                    x2 = 0
                    y2 = random.randint(0,740)    
                case 3: #bottom border
                    x2 = random.randint(0,740)
                    y2 = 740
                case 4: #right border
                    x2 = 740
                    y2 = random.randint(0,740)
            meteor2 = pygame.Rect(x2,y2,width2,height2)
            metsurf2 = pygame.Surface((width2,height2))
            metsurf2.fill((randcolor()))
            path2 = speed(edge)
        if timing > 5:
            meteor2 = meteor2.move(path2)

        if timing == 10 or (meteor3.bottom < 0 or meteor3.top > 800 or meteor3.left > 800 or meteor3.right < 0):
            edge = random.randint(1,4)
            width3 = random.randint(20,60)
            height3 = random.randint(20,60)
            match edge:
                case 1: #top border
                    x3 = random.randint(0,740)
                    y3 = 0
                case 2: #left border
                    x3 = 0
                    y3 = random.randint(0,740)    
                case 3: #bottom border
                    x3 = random.randint(0,740)
                    y3 = 740
                case 4: #right border
                    x3 = 740
                    y3 = random.randint(0,740)
            meteor3 = pygame.Rect(x3,y3,width3,height3)
            metsurf3 = pygame.Surface((width3,height3))
            metsurf3.fill((randcolor()))
            path3 = speed(edge)
        if timing > 10:
            meteor3 = meteor3.move(path3)
        
        if timing == 15 or (meteor4.bottom < 0 or meteor4.top > 800 or meteor4.left > 800 or meteor4.right < 0):
            edge = random.randint(1,4)
            width4 = random.randint(20,60)
            height4 = random.randint(20,60)
            match edge:
                case 1: #top border
                    x4 = random.randint(0,740)
                    y4 = 0
                case 2: #left border
                    x4 = 0
                    y4 = random.randint(0,740)    
                case 3: #bottom border
                    x4 = random.randint(0,740)
                    y4 = 740
                case 4: #right border
                    x4 = 740
                    y4 = random.randint(0,740)
            meteor4 = pygame.Rect(x4,y4,width4,height4)
            metsurf4 = pygame.Surface((width4,height4))
            metsurf4.fill((randcolor()))
            path4 = speed(edge)
        if timing > 15:
            meteor4 = meteor4.move(path4)

        if timing == 20 or (meteor5.bottom < 0 or meteor5.top > 800 or meteor5.left > 800 or meteor5.right < 0):
            edge = random.randint(1,4)
            width5 = random.randint(20,60)
            height5 = random.randint(20,60)
            match edge:
                case 1: #top border
                    x5 = random.randint(0,740)
                    y5 = 0
                case 2: #left border
                    x5 = 0
                    y5 = random.randint(0,740)    
                case 3: #bottom border
                    x5 = random.randint(0,740)
                    y5 = 740
                case 4: #right border
                    x5 = 740
                    y5 = random.randint(0,740)
            meteor5 = pygame.Rect(x5,y5,width5,height5)
            metsurf5 = pygame.Surface((width5,height5))
            metsurf5.fill((randcolor()))
            path5 = speed(edge)
        if timing > 20:
            meteor5 = meteor5.move(path5)

        if timing == 25 or (meteor6.bottom < 0 or meteor6.top > 800 or meteor6.left > 800 or meteor6.right < 0):
            edge = random.randint(1,4)
            width6 = random.randint(20,60)
            height6 = random.randint(20,60)
            match edge:
                case 1: #top border
                    x6 = random.randint(0,740)
                    y6 = 0
                case 2: #left border
                    x6 = 0
                    y6 = random.randint(0,740)    
                case 3: #bottom border
                    x6 = random.randint(0,740)
                    y6 = 740
                case 4: #right border
                    x6 = 740
                    y6 = random.randint(0,740)
            meteor6 = pygame.Rect(x6,y6,width6,height6)
            metsurf6 = pygame.Surface((width6,height6))
            metsurf6.fill((randcolor()))
            path6 = speed(edge)
        if timing > 25:
            meteor6 = meteor6.move(path6)

        if timing == 30 or (meteor7.bottom < 0 or meteor7.top > 800 or meteor7.left > 800 or meteor7.right < 0):
            edge = random.randint(1,4)
            width7 = random.randint(20,60)
            height7 = random.randint(20,60)
            match edge:
                case 1: #top border
                    x7 = random.randint(0,740)
                    y7 = 0
                case 2: #left border
                    x7 = 0
                    y7 = random.randint(0,740)    
                case 3: #bottom border
                    x7 = random.randint(0,740)
                    y7 = 740
                case 4: #right border
                    x7 = 740
                    y7 = random.randint(0,740)
            meteor7 = pygame.Rect(x7,y7,width7,height7)
            metsurf7 = pygame.Surface((width7,height7))
            metsurf7.fill((randcolor()))
            path7 = speed(edge)
        if timing > 30:
            meteor7 = meteor7.move(path7)

        if timing == 35 or (meteor8.bottom < 0 or meteor8.top > 800 or meteor8.left > 800 or meteor8.right < 0):
            edge = random.randint(1,4)
            width8 = random.randint(20,60)
            height8 = random.randint(20,60)
            match edge:
                case 1: #top border
                    x8 = random.randint(0,740)
                    y8 = 0
                case 2: #left border
                    x8 = 0
                    y8 = random.randint(0,740)    
                case 3: #bottom border
                    x8 = random.randint(0,740)
                    y8 = 740
                case 4: #right border
                    x8 = 740
                    y8 = random.randint(0,740)
            meteor8 = pygame.Rect(x8,y8,width8,height8)
            metsurf8 = pygame.Surface((width8,height8))
            metsurf8.fill((randcolor()))
            path8 = speed(edge)
        if timing > 35:
            meteor8 = meteor8.move(path8)

        if timing == 40 or (meteor9.bottom < 0 or meteor9.top > 800 or meteor9.left > 800 or meteor9.right < 0):
            edge = random.randint(1,4)
            width9 = random.randint(20,60)
            height9 = random.randint(20,60)
            match edge:
                case 1: #top border
                    x9 = random.randint(0,740)
                    y9 = 0
                case 2: #left border
                    x9 = 0
                    y9 = random.randint(0,740)    
                case 3: #bottom border
                    x9 = random.randint(0,740)
                    y9 = 740
                case 4: #right border
                    x9 = 740
                    y9 = random.randint(0,740)
            meteor9 = pygame.Rect(x9,y9,width9,height9)
            metsurf9 = pygame.Surface((width9,height9))
            metsurf9.fill((randcolor()))
            path9 = speed(edge)
        if timing > 40:
            meteor9 = meteor9.move(path9)

        if timing == 45 or (meteor10.bottom < 0 or meteor10.top > 800 or meteor10.left > 800 or meteor10.right < 0):
            edge = random.randint(1,4)
            width10 = random.randint(20,60)
            height10 = random.randint(20,60)
            match edge:
                case 1: #top border
                    x10 = random.randint(0,740)
                    y10 = 0
                case 2: #left border
                    x10 = 0
                    y10 = random.randint(0,740)    
                case 3: #bottom border
                    x10 = random.randint(0,740)
                    y10 = 740
                case 4: #right border
                    x10 = 740
                    y10 = random.randint(0,740)
            meteor10 = pygame.Rect(x10,y10,width10,height10)
            metsurf10 = pygame.Surface((width10,height10))
            metsurf10.fill((randcolor()))
            path10 = speed(edge)
        if timing > 45:
            meteor10 = meteor10.move(path10)

        timefont = pygame.font.Font(None, 32)
        timer = timefont.render(counting_string,True,(255,255,255))

        screen.fill((0,0,0))
        screen.blit(shipsurf,player)
        screen.blit(metsurf1,meteor1)
        if timing > 5:
            screen.blit(metsurf2,meteor2)
        if timing > 10:
            screen.blit(metsurf3,meteor3)
        if timing > 15:
            screen.blit(metsurf4,meteor4)
        if timing > 20:
            screen.blit(metsurf5,meteor5)
        if timing > 25:
            screen.blit(metsurf6,meteor6)
        if timing > 30:
            screen.blit(metsurf7,meteor7)
        if timing > 35:
            screen.blit(metsurf8,meteor8)
        if timing > 40:
            screen.blit(metsurf9,meteor9)
        if timing > 45:
            screen.blit(metsurf10,meteor10)
        screen.blit(timer,(10,5))

        meteorlist = [meteor1,meteor2,meteor3,meteor4,meteor5,meteor6,meteor7,meteor8,meteor9,meteor10]
        if collision():
            dead = True
            with open("Assignment 5/leaderboard.txt",mode = "r",encoding = "utf-8") as f:
                lines = f.readlines()
                board = []
                for i in lines:
                    i = i.replace("[","")
                    i = i.replace("]","")
                    board.append(int(i))
                board.append(counting_time)
                board.sort()
            with open("Assignment 5/leaderboard.txt",mode = "w",encoding = "utf-8") as f:
                for i in board:
                    f.write(str(i)+"\n")
            pygame.mixer.music.stop()
            deathnoise.play()

            break
            
        pygame.display.flip()
        clock.tick(60)

    while dead:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        sys.exit()
                    if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                        dead = False

                finaltime = timefont.render("Your final time is:   " + counting_string,True,(255,255,255))
                time_rect = finaltime.get_rect(center = (400,150))

                with open("Assignment 5\leaderboard.txt",mode = "r",encoding = "utf-8" ) as f:
                    scores = f.readlines()
                    lboard = []
                    for i in scores:
                        i = i.replace("[","")
                        i = i.replace("]","")
                        lboard.append(int(i))
                        lboard.sort(reverse = True)
                    score1 = "1. " + str(scorecalc(lboard[0]))
                    score2 = "2. " + str(scorecalc(lboard[1]))
                    score3 = "3. " + str(scorecalc(lboard[2]))
                    score4 = "4. " + str(scorecalc(lboard[3]))
                    score5 = "5. " + str(scorecalc(lboard[4]))
                
                gamefont = pygame.font.SysFont(None,72,bold = True)
                gameover = gamefont.render("Game Over",False,(255,255,255))
                game_rect = gameover.get_rect(center = (400,100))

                lead1 = timefont.render(score1,True,(255,255,255))
                lead2 = timefont.render(score2,True,(255,255,255))
                lead3 = timefont.render(score3,True,(255,255,255))
                lead4 = timefont.render(score4,True,(255,255,255))
                lead5 = timefont.render(score5,True,(255,255,255))

                lead1_rect = lead1.get_rect(center = (400,400))
                lead2_rect = lead2.get_rect(center = (400,420))
                lead3_rect = lead3.get_rect(center = (400,440))
                lead4_rect = lead4.get_rect(center = (400,460))
                lead5_rect = lead5.get_rect(center = (400,480))

                refont = pygame.font.Font(None,40)
                retry = refont.render("Press SPACE to play again",True,(255,255,255))
                re_rect = retry.get_rect(center = (400,700))

                screen.fill((0,0,0))
                screen.blit(finaltime,time_rect)
                screen.blit(gameover,game_rect)
                screen.blit(lead1,lead1_rect)
                screen.blit(lead2,lead2_rect)
                screen.blit(lead3,lead3_rect)
                screen.blit(lead4,lead4_rect)
                screen.blit(lead5,lead5_rect)
                screen.blit(retry,re_rect)

                pygame.display.flip()

